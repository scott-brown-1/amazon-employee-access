
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #########################
> ### Imports and setup ###
> #########################
> 
> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.3     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.0
✔ ggplot2   3.4.3     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.0
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──
✔ broom        1.0.5     ✔ rsample      1.2.0
✔ dials        1.2.0     ✔ tune         1.1.2
✔ infer        1.0.5     ✔ workflows    1.1.3
✔ modeldata    1.2.0     ✔ workflowsets 1.0.1
✔ parsnip      1.1.1     ✔ yardstick    1.2.0
✔ recipes      1.0.8     
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ scales::discard() masks purrr::discard()
✖ dplyr::filter()   masks stats::filter()
✖ recipes::fixed()  masks stringr::fixed()
✖ dplyr::lag()      masks stats::lag()
✖ yardstick::spec() masks readr::spec()
✖ recipes::step()   masks stats::step()
• Search for functions across packages at https://www.tidymodels.org/find/
> library(doParallel)
Loading required package: foreach

Attaching package: ‘foreach’

The following objects are masked from ‘package:purrr’:

    accumulate, when

Loading required package: iterators
Loading required package: parallel
> 
> setwd('..')
> source('./scripts/amazon_analysis.R')
> PARALLEL <- F
> 
> #########################
> ####### Load Data #######
> #########################
> 
> ## Load data
> train <- prep_df(vroom::vroom('./data/train.csv'))
Rows: 32769 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): ACTION, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTN...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> test <- prep_df(vroom::vroom('./data/test.csv'))
Rows: 58921 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): id, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTNAME,...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> #########################
> ## Feature Engineering ## 
> #########################
> 
> set.seed(42)
> 
> ## parallel tune grid
> if(PARALLEL){
+   cl <- makePSOCKcluster(15)
+   registerDoParallel(cl)
+ }
> ## Set up preprocessing
> prepped_recipe <- setup_train_recipe(train)
> 
> ## Bake recipe
> bake(prepped_recipe, new_data=train)
# A tibble: 32,769 × 6
   ACTION     PC1    PC2      PC3    PC4     PC5
   <fct>    <dbl>  <dbl>    <dbl>  <dbl>   <dbl>
 1 1      -0.566  -0.300  0.159    0.212  0.405 
 2 1      -0.814  -0.101  0.00900 -0.287 -1.70  
 3 1       2.35   -0.217  1.26     0.274 -0.120 
 4 1      -0.0791 -1.73   0.807   -0.366  0.948 
 5 1       3.35   -0.159  1.46     0.667 -1.35  
 6 0       2.86    0.452 -1.68    -0.108  0.0502
 7 1      -0.0715 -1.30   0.184   -0.702  0.879 
 8 1       0.0720 -0.270  1.49     0.278 -0.822 
 9 1       1.40   -1.87   0.618    0.107  0.129 
10 1       2.78    2.18   3.64     0.326 -0.635 
# ℹ 32,759 more rows
> bake(prepped_recipe, new_data=test)
# A tibble: 58,921 × 5
       PC1    PC2     PC3     PC4    PC5
     <dbl>  <dbl>   <dbl>   <dbl>  <dbl>
 1  4.20    2.19   1.43    1.70    1.40 
 2 -1.80    1.44  -0.621  -1.96   -0.916
 3 -1.01   -0.679  0.657   0.309   1.15 
 4  0.386  -0.598  0.140   0.0763 -0.605
 5 -3.53    1.22  -0.236  -1.24   -0.616
 6 -2.83    1.42  -0.0914 -1.67    0.265
 7 -0.0590  0.632 -2.04    1.68   -1.62 
 8 -3.61    1.05   0.655   1.89   -0.599
 9  2.66   -0.884 -1.05   -1.91   -0.693
10  0.360  -1.38   0.0521 -1.70    1.27 
# ℹ 58,911 more rows
> 
> #########################
> ## Fit Classifer Model ##
> #########################
> 
> ## Define KNN model
> knn_model <- nearest_neighbor(neighbors=tune()) %>%
+   set_mode("classification") %>%
+   set_engine("kknn")
> 
> knn_wf <- workflow() %>%
+   add_recipe(prepped_recipe) %>%
+   add_model(knn_model)
> 
> ## Grid of values to tune over
> tuning_grid <- grid_regular(
+   neighbors(),
+   levels = 5)
> 
> ## Split data for CV
> folds <- vfold_cv(train, v = 5, repeats=1)
> 
> ## Run the CV
> cv_results <- knn_wf %>%
+   tune_grid(resamples=folds,
+             grid=tuning_grid,
+             metrics=metric_set(roc_auc))
→ A | warning: Model failed to converge with max|grad| = 0.32522 (tol = 0.002, component 1), Model is nearly unidentifiable: very large eigenvalue
                - Rescale variables?
There were issues with some computations   A: x1
There were issues with some computations   A: x1

> 
> ## Find optimal tuning params
> best_params <- cv_results %>%
+   select_best("roc_auc")
> 
> ## Fit workflow
> final_wf <- knn_wf %>%
+   finalize_workflow(best_params) %>%
+   fit(data = train)
> 
> ## Predict new y
> output <- predict(final_wf, new_data=test, type='prob') %>%
+   bind_cols(., test) %>%
+   rename(ACTION=.pred_1) %>%
+   select(id, ACTION)
> 
> vroom::vroom_write(output,'./outputs/knn_predictions.csv',delim=',')
> 
> if(PARALLEL){
+   stopCluster(cl)
+ }
> 
> proc.time()
   user  system elapsed 
645.128   2.920 473.334 
