
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #########################
> ### Imports and setup ###
> #########################
> 
> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.3     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.0
✔ ggplot2   3.4.3     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.0
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──
✔ broom        1.0.5     ✔ rsample      1.2.0
✔ dials        1.2.0     ✔ tune         1.1.2
✔ infer        1.0.5     ✔ workflows    1.1.3
✔ modeldata    1.2.0     ✔ workflowsets 1.0.1
✔ parsnip      1.1.1     ✔ yardstick    1.2.0
✔ recipes      1.0.8     
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ scales::discard() masks purrr::discard()
✖ dplyr::filter()   masks stats::filter()
✖ recipes::fixed()  masks stringr::fixed()
✖ dplyr::lag()      masks stats::lag()
✖ yardstick::spec() masks readr::spec()
✖ recipes::step()   masks stats::step()
• Dig deeper into tidy modeling with R at https://www.tmwr.org
> library(doParallel)
Loading required package: foreach

Attaching package: ‘foreach’

The following objects are masked from ‘package:purrr’:

    accumulate, when

Loading required package: iterators
Loading required package: parallel
> library(discrim)

Attaching package: ‘discrim’

The following object is masked from ‘package:dials’:

    smoothness

> library(stacks)
> 
> setwd('..')
> source('./scripts/amazon_analysis.R')
> PARALLEL <- T
> 
> #########################
> ####### Load Data #######
> #########################
> 
> ## Load data
> train <- prep_df(vroom::vroom('./data/train.csv'))
Rows: 32769 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): ACTION, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTN...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> test <- prep_df(vroom::vroom('./data/test.csv'))
Rows: 58921 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): id, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTNAME,...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> #########################
> ## Feature Engineering ##
> #########################
> 
> set.seed(2003)
> 
> ## parallel tune grid
> 
> if(PARALLEL){
+   cl <- makePSOCKcluster(10)
+   registerDoParallel(cl)
+ }
> 
> ## Set up preprocessing
> prepped_recipe <- setup_train_recipe(train)
> 
> ## Bake recipe
> bake(prepped_recipe, new_data=train)
# A tibble: 32,769 × 6
   ACTION    PC1     PC2     PC3     PC4     PC5
   <fct>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>
 1 1      -0.440 -0.378  -0.447   0.101   0.325 
 2 1      -0.751  0.0296  0.0751 -0.249  -1.72  
 3 1       1.92  -0.155  -1.45    0.118  -0.204 
 4 1      -0.731 -1.19   -1.02   -0.494   0.892 
 5 1       2.96  -0.379  -1.90    0.440  -1.51  
 6 0       2.92  -0.583   1.39   -0.0400  0.0638
 7 1      -0.562 -0.957  -0.290  -0.754   0.853 
 8 1      -0.223  0.288  -1.37    0.206  -0.845 
 9 1       0.825 -1.91   -1.34   -0.137  -0.0359
10 1       2.68   2.77   -3.03    0.160  -0.687 
# ℹ 32,759 more rows
> bake(prepped_recipe, new_data=test)
# A tibble: 58,921 × 5
       PC1     PC2    PC3    PC4    PC5
     <dbl>   <dbl>  <dbl>  <dbl>  <dbl>
 1  4.30    1.70   -1.41   1.57   1.41 
 2 -0.967   1.17    0.970 -1.87  -0.964
 3 -1.34   -0.0507 -0.513  0.294  1.19 
 4 -0.0844 -0.198   0.103  0.182 -0.500
 5 -2.72    1.47    0.799 -1.11  -0.584
 6 -2.03    1.56    0.620 -1.59   0.264
 7  0.367  -0.101   1.93   1.89  -1.50 
 8 -2.97    1.58   -0.269  1.96  -0.504
 9  2.40   -1.68    0.482 -2.00  -0.865
10 -0.181  -1.12   -0.156 -1.76   1.22 
# ℹ 58,911 more rows
> 
> #########################
> ## PREPARE BASE MODELS ##
> #########################
> 
> ## Split data for CV
> folds <- vfold_cv(train, v = 5, repeats=1)
> 
> ## Create a control grid
> untuned_model <- control_stack_grid() #If tuning over a grid
> 
> #### BART ####
> 
> ## Define model
> bart_model <- 
+   parsnip::bart(
+     trees = tune(),
+     prior_terminal_node_coef = 0.75,#tune(), #0.75,
+     prior_terminal_node_expo = 1.75#tune()  #1.75,
+   ) %>% 
+   set_engine("dbarts") %>% 
+   set_mode("classification")
> 
> ## Define workflow
> bart_wf <-
+   workflow(prepped_recipe) %>%
+   add_model(bart_model)
> 
> ## Grid of values to tune over
> bart_grid <- grid_regular(
+   trees(),
+   levels = 5
+ )
> 
> ## Perform parameter tuning
> tuned_bart_models <- bart_wf %>%
+   tune_grid(
+     resamples=folds,
+     grid=bart_grid,
+     metrics = metric_set(roc_auc),
+     control = untuned_model)
> 
> #### NAIVE BAYES ####
> 
> ## Define model
> bayes_model <- naive_Bayes(
+   Laplace=tune(),
+   smoothness=tune()) %>%
+   set_engine("naivebayes") %>%
+   set_mode("classification")
> 
> ## Define workflow
> bayes_wf <- workflow() %>%
+   add_recipe(prepped_recipe) %>%
+   add_model(bayes_model)
> 
> ## Grid of values to tune over
> bayes_grid <- grid_regular(
+   Laplace(),
+   smoothness(),
+   levels = 5)
> 
> ## Perform parameter tuning
> tuned_bayes_models <- bayes_wf %>%
+   tune_grid(
+     resamples=folds,
+     grid=bayes_grid,
+     metrics = metric_set(roc_auc),
+     control = untuned_model)
> 
> #########################
> # Stack models together #
> #########################
> 
> # Create meta learner
> model_stack <- stacks() %>%
+   add_candidates(tuned_bart_models) %>%
+   add_candidates(tuned_bayes_models)
Warning message:
Predictions from 40 candidates were identical to those from existing candidates
and were removed from the data stack. 
> 
> # Fit meta learner
> fitted_stack <- model_stack %>%
+   blend_predictions() %>% # This is a Lasso (L1) penalized reg model
+   fit_members()
> 
> #print(head(as_tibble(fitted_stack)))
> 
> ## Predict new y
> output <- predict(fitted_stack, new_data=test, type='prob') %>%
+   bind_cols(., test) %>%
+   rename(ACTION=.pred_1) %>%
+   select(id, ACTION)
> 
> vroom::vroom_write(output,'./outputs/stacked_predictions.csv',delim=',')
> 
> if(PARALLEL){
+   stopCluster(cl)
+ }
> 
> proc.time()
    user   system  elapsed 
 475.881    9.610 4987.778 
